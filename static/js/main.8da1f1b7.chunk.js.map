{"version":3,"sources":["media/BEEP.mp3","Counter.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","ArrowButton","props","react_default","a","createElement","id","onClick","clicked","mode","direction","index_es","icon","faArrowUp","faArrowDown","ClockDisplay","className","Math","floor","time","Audio","src","beep","Counter","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleCounter","state","count","setState","playBeep","breakLength","sessionLength","toggleTimer","running","clearInterval","myVar","setInterval","resetTimer","resetBeep","changeTime","document","getElementById","play","beepsound","pause","currentTime","React","Component","App","src_Counter","Boolean","window","location","hostname","match","ReactDOM","render","src_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,wQC4HxC,SAASC,EAAYC,GACjB,OACIC,EAAAC,EAAAC,cAAA,UAAQC,GAAIJ,EAAMI,GAAIC,QAAS,kBAAML,EAAMM,QAAQN,EAAMO,KAAMP,EAAMQ,aACjEP,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAiBC,KAA0B,OAApBV,EAAMQ,UAAqBG,IAAYC,OAK1E,SAASC,EAAab,GAClB,OACIC,EAAAC,EAAAC,cAAA,OAAKC,GAAG,YAAYU,UAAU,gBACzBC,KAAKC,MAAMhB,EAAMiB,KAAO,IAAM,GAAK,IAAMF,KAAKC,MAAMhB,EAAMiB,KAAO,IAAMF,KAAKC,MAAMhB,EAAMiB,KAAO,IADpG,IAGKjB,EAAMiB,KAAO,GAAK,GAAK,IAAMjB,EAAMiB,KAAO,GAAKjB,EAAMiB,KAAO,IAKzE,SAASC,IACL,OACIjB,EAAAC,EAAAC,cAAA,SAAOC,GAAG,OAAOe,IAAKC,MAIfC,kBA5IX,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACVC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAYJI,cAAgB,WACRP,EAAKQ,MAAMC,MAAQ,EACnBT,EAAKU,SAAS,CACVD,MAAOT,EAAKQ,MAAMC,MAAQ,IAEF,IAArBT,EAAKQ,MAAMC,QAClBT,EAAKW,WACmB,YAApBX,EAAKQ,MAAMvB,KACXe,EAAKU,SAAS,CAACD,MAAOT,EAAKQ,MAAMI,YAAa3B,KAAM,UACzB,UAApBe,EAAKQ,MAAMvB,MAClBe,EAAKU,SAAS,CAACD,MAAOT,EAAKQ,MAAMK,cAAe5B,KAAM,cAvBpDe,EA4Bdc,YAAc,WACNd,EAAKQ,MAAMO,SAMXC,cAAchB,EAAKiB,OACnBjB,EAAKU,SAAS,CACVK,SAAS,MAPbf,EAAKiB,MAAQC,YAAYlB,EAAKO,cAAe,KAC7CP,EAAKU,SAAS,CACVK,SAAS,MAhCPf,EA2CdmB,WAAa,WACTnB,EAAKoB,YACLpB,EAAKU,SAAS,CACVzB,KAAM,UACN8B,SAAS,EACTN,MAAO,KACPG,YAAa,IACbC,cAAe,OAEnBG,cAAchB,EAAKiB,QApDTjB,EAuDdqB,WAAa,SAACpC,EAAMC,IACU,IAAvBc,EAAKQ,MAAMO,UACG,UAAT9B,EACkB,OAAdC,EACAc,EAAKU,SAAS,CACVE,YAAaZ,EAAKQ,MAAMI,aAAe,KAAOZ,EAAKQ,MAAMI,YAAc,GAAKZ,EAAKQ,MAAMI,YACvFH,MAA2B,UAApBT,EAAKQ,MAAMvB,KAAoBe,EAAKQ,MAAMC,OAAS,KAAOT,EAAKQ,MAAMI,YAAc,GAAKZ,EAAKQ,MAAMI,YAAeZ,EAAKQ,MAAMC,QAGxIT,EAAKU,SAAS,CACVE,YAAaZ,EAAKQ,MAAMI,YAAc,GAAKZ,EAAKQ,MAAMI,YAAc,GAAKZ,EAAKQ,MAAMI,YACpFH,MAA2B,UAApBT,EAAKQ,MAAMvB,KAAoBe,EAAKQ,MAAMC,OAAS,IAAMT,EAAKQ,MAAMI,YAAc,GAAKZ,EAAKQ,MAAMI,YAAeZ,EAAKQ,MAAMC,QAIzH,OAAdvB,EACAc,EAAKU,SAAS,CACVG,cAAeb,EAAKQ,MAAMK,eAAiB,KAAOb,EAAKQ,MAAMK,cAAgB,GAAKb,EAAKQ,MAAMK,cAC7FJ,MAA2B,YAApBT,EAAKQ,MAAMvB,KAAsBe,EAAKQ,MAAMC,OAAS,KAAOT,EAAKQ,MAAMK,cAAgB,GAAKb,EAAKQ,MAAMK,cAAiBb,EAAKQ,MAAMC,QAG9IT,EAAKU,SAAS,CACVG,cAAeb,EAAKQ,MAAMK,cAAgB,GAAKb,EAAKQ,MAAMK,cAAgB,GAAKb,EAAKQ,MAAMK,cAC1FJ,MAA2B,YAApBT,EAAKQ,MAAMvB,KAAsBe,EAAKQ,MAAMC,OAAS,IAAMT,EAAKQ,MAAMK,cAAgB,GAAKb,EAAKQ,MAAMK,cAAiBb,EAAKQ,MAAMC,UA9E/IT,EAsFdW,SAAW,WACSW,SAASC,eAAe,QAC9BC,QAxFAxB,EA2FdoB,UAAY,WACR,IAAIK,EAAYH,SAASC,eAAe,QACxCE,EAAUC,QACVD,EAAUE,YAAc,GA5FxB3B,EAAKQ,MAAQ,CACTC,MAAO,KACPM,SAAS,EACT9B,KAAM,UACN4B,cAAe,KACfD,YAAa,KAEjBZ,EAAKiB,MAAQ,KATHjB,wEAmGV,OACIrB,EAAAC,EAAAC,cAAA,OAAKW,UAAU,aACXb,EAAAC,EAAAC,cAAA,OAAKC,GAAG,eAAR,gBACAH,EAAAC,EAAAC,cAAA,OAAKC,GAAG,cAAcU,UAAU,aAAaW,KAAKK,MAAMvB,MACxDN,EAAAC,EAAAC,cAAA,OAAKC,GAAG,iBAAR,kBACAH,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAACJ,EAAD,CAAaK,GAAG,kBAAkBI,UAAW,KAAMD,KAAM,QAASD,QAASmB,KAAKkB,aAArF,IAAmG1C,EAAAC,EAAAC,cAAA,QAAMC,GAAG,gBAAgBW,KAAKC,MAAMS,KAAKK,MAAMI,YAAc,KAAhK,IAA4KjC,EAAAC,EAAAC,cAACJ,EAAD,CAAaK,GAAG,kBAAkBI,UAAW,OAAQD,KAAM,QAASD,QAASmB,KAAKkB,cAC9P1C,EAAAC,EAAAC,cAAA,YACAF,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAACJ,EAAD,CAAaK,GAAG,oBAAoBI,UAAW,KAAMD,KAAM,UAAWD,QAASmB,KAAKkB,aAAzF,IAAuG1C,EAAAC,EAAAC,cAAA,QAAMC,GAAG,kBAAkBW,KAAKC,MAAMS,KAAKK,MAAMK,cAAgB,KAAxK,IAAoLlC,EAAAC,EAAAC,cAACJ,EAAD,CAAaK,GAAG,oBAAoBI,UAAW,OAAQD,KAAM,UAAWD,QAASmB,KAAKkB,cAC1Q1C,EAAAC,EAAAC,cAAA,OAAKC,GAAG,aAAaU,UAAU,cAAcT,QAASoB,KAAKW,aAA3D,cACAnC,EAAAC,EAAAC,cAACU,EAAD,CAAcI,KAAMQ,KAAKK,MAAMC,QAC/B9B,EAAAC,EAAAC,cAAA,OAAKC,GAAG,QAAQU,UAAU,cAAcT,QAASoB,KAAKgB,YAAtD,SACAxC,EAAAC,EAAAC,cAACe,EAAD,cA/GMgC,IAAMC,iBCKbC,MARf,WACE,OACEnD,EAAAC,EAAAC,cAAA,OAAKW,UAAU,OACbb,EAAAC,EAAAC,cAACkD,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO3D,EAAAC,EAAAC,cAAC0D,EAAD,MAASjB,SAASC,eAAe,SDyH3C,kBAAmBiB,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.8da1f1b7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/BEEP.72b919fb.mp3\";","import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faArrowUp } from '@fortawesome/free-solid-svg-icons';\r\nimport { faArrowDown } from '@fortawesome/free-solid-svg-icons';\r\nimport beep from './media/BEEP.mp3';\r\n\r\n\r\nclass Counter extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            count: 1500,\r\n            running: false,\r\n            mode: \"Session\",\r\n            sessionLength: 1500,\r\n            breakLength: 300\r\n        }\r\n        this.myVar = null;\r\n       \r\n    }\r\n\r\n    handleCounter = () => {\r\n        if (this.state.count > 0) {\r\n            this.setState({\r\n                count: this.state.count - 1\r\n            });\r\n        } else if (this.state.count === 0) {\r\n            this.playBeep();\r\n            if (this.state.mode === \"Session\") {\r\n                this.setState({count: this.state.breakLength, mode: \"Break\"});\r\n            } else if (this.state.mode === \"Break\") {\r\n                this.setState({count: this.state.sessionLength, mode: \"Session\"});\r\n            }\r\n        }\r\n    }\r\n\r\n    toggleTimer = () => {\r\n        if(!this.state.running) {\r\n            this.myVar = setInterval(this.handleCounter, 1000);\r\n            this.setState({\r\n                running: true\r\n            })\r\n        } else {\r\n            clearInterval(this.myVar);\r\n            this.setState({\r\n                running: false\r\n            })\r\n\r\n        }\r\n    }\r\n\r\n    resetTimer = () => {\r\n        this.resetBeep();\r\n        this.setState({\r\n            mode: \"Session\",\r\n            running: false,\r\n            count: 1500,\r\n            breakLength: 300,\r\n            sessionLength: 1500\r\n        })\r\n        clearInterval(this.myVar);\r\n    }\r\n\r\n    changeTime = (mode, direction) => {\r\n        if(this.state.running === false){\r\n            if (mode === \"break\") {\r\n                if (direction === \"up\") {\r\n                    this.setState({\r\n                        breakLength: this.state.breakLength <= 3540 ? this.state.breakLength + 60 : this.state.breakLength,\r\n                        count: this.state.mode === \"Break\" ? (this.state.count <= 3540 ? this.state.breakLength + 60 : this.state.breakLength) : this.state.count\r\n                    });\r\n                } else {\r\n                    this.setState({\r\n                        breakLength: this.state.breakLength > 60 ? this.state.breakLength - 60 : this.state.breakLength,\r\n                        count: this.state.mode === \"Break\" ? (this.state.count >= 120 ? this.state.breakLength - 60 : this.state.breakLength) : this.state.count\r\n                    });\r\n                }\r\n            } else {\r\n                if (direction === \"up\") {\r\n                    this.setState({\r\n                        sessionLength: this.state.sessionLength <= 3540 ? this.state.sessionLength + 60 : this.state.sessionLength,\r\n                        count: this.state.mode === \"Session\" ? (this.state.count <= 3540 ? this.state.sessionLength + 60 : this.state.sessionLength) : this.state.count\r\n                    });\r\n                } else {\r\n                    this.setState({\r\n                        sessionLength: this.state.sessionLength > 60 ? this.state.sessionLength - 60 : this.state.sessionLength,\r\n                        count: this.state.mode === \"Session\" ? (this.state.count >= 120 ? this.state.sessionLength - 60 : this.state.sessionLength) : this.state.count\r\n                    });\r\n                }\r\n            }\r\n            \r\n        }\r\n    }\r\n\r\n    playBeep = () => {\r\n        var beepsound = document.getElementById('beep');\r\n        beepsound.play();\r\n    } \r\n\r\n    resetBeep = () => {\r\n        var beepsound = document.getElementById('beep');\r\n        beepsound.pause();\r\n        beepsound.currentTime = 0;\r\n    }\r\n\r\n\r\n    render() {\r\n        return(\r\n            <div className=\"container\">\r\n                <div id=\"break-label\">Break Length</div>\r\n                <div id=\"timer-label\" className=\"modeLabel\">{this.state.mode}</div>\r\n                <div id=\"session-label\">Session Length</div>\r\n                <div><ArrowButton id=\"break-increment\" direction={\"up\"} mode={\"break\"} clicked={this.changeTime}/> <span id=\"break-length\">{Math.floor(this.state.breakLength / 60)}</span> <ArrowButton id=\"break-decrement\" direction={\"down\"} mode={\"break\"} clicked={this.changeTime}/></div>\r\n                <div></div>\r\n                <div><ArrowButton id=\"session-increment\" direction={\"up\"} mode={\"session\"} clicked={this.changeTime}/> <span id=\"session-length\">{Math.floor(this.state.sessionLength / 60)}</span> <ArrowButton id=\"session-decrement\" direction={\"down\"} mode={\"session\"} clicked={this.changeTime}/></div>\r\n                <div id=\"start_stop\" className=\"clockButton\" onClick={this.toggleTimer}>Start/Stop</div>\r\n                <ClockDisplay time={this.state.count}/>\r\n                <div id=\"reset\" className=\"clockButton\" onClick={this.resetTimer}>Reset</div>\r\n                <Audio />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nfunction ArrowButton(props) {\r\n    return(\r\n        <button id={props.id} onClick={() => props.clicked(props.mode, props.direction)}>\r\n            <FontAwesomeIcon icon={props.direction === \"up\" ? faArrowUp : faArrowDown} />\r\n        </button>\r\n    )\r\n}\r\n\r\nfunction ClockDisplay(props) {\r\n    return(\r\n        <div id=\"time-left\" className=\"clockDisplay\" >\r\n            {Math.floor(props.time / 60) < 10 ? \"0\" + Math.floor(props.time / 60) : Math.floor(props.time / 60)}\r\n            :\r\n            {props.time % 60 < 10 ? \"0\" + props.time % 60 : props.time % 60}\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction Audio() {\r\n    return (\r\n        <audio id=\"beep\" src={beep} />\r\n    )\r\n}\r\n\r\nexport default Counter","import React from 'react';\r\nimport Counter from './Counter';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Counter />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\n\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}